name: Build and Push Docker Images

on:
  push:
    branches: [ main, develop, staging, latest ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  OWNER: jockdarock

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - name: frontend
            context: ./agent-frontend
            dockerfile: ./agent-frontend/Dockerfile.agent.frontend
            image: ghcr.io/jockdarock/scribby-agent-frontend
          - name: backend
            context: ./backend
            dockerfile: ./backend/Dockerfile.backend
            image: ghcr.io/jockdarock/scribby-backend
          - name: backend-agent
            context: ./backend-agent
            dockerfile: ./backend-agent/Dockerfile.agent
            image: ghcr.io/jockdarock/scribby-backend-agent

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=ref,event=branch,suffix=-{{sha}}
            type=ref,event=pr,suffix=-{{sha}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Scribby ${{ matrix.name }}
            org.opencontainers.image.description=AI-powered transcription and content generation - ${{ matrix.name }} service
            org.opencontainers.image.url=https://github.com/jockdarock/scribby
            org.opencontainers.image.source=https://github.com/jockdarock/scribby
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate image summary
        run: |
          echo "## Docker Image Built: ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ matrix.image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  publish-manifest:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Make images public
        run: |
          # Set all images to public visibility
          gh api --method PATCH /user/packages/container/scribby-agent-frontend/versions \
            --field visibility=public || echo "Frontend package not found or already public"
          
          gh api --method PATCH /user/packages/container/scribby-backend/versions \
            --field visibility=public || echo "Backend package not found or already public"
          
          gh api --method PATCH /user/packages/container/scribby-backend-agent/versions \
            --field visibility=public || echo "Backend-agent package not found or already public"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate deployment summary
        run: |
          echo "## ðŸš€ Scribby Deployment Ready" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All container images have been built and pushed to GitHub Container Registry:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Container Images" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Image | Pull Command |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------|--------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | \`ghcr.io/jockdarock/scribby-agent-frontend\` | \`docker pull ghcr.io/jockdarock/scribby-agent-frontend:${{ github.ref_name }}-${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | \`ghcr.io/jockdarock/scribby-backend\` | \`docker pull ghcr.io/jockdarock/scribby-backend:${{ github.ref_name }}-${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Agent | \`ghcr.io/jockdarock/scribby-backend-agent\` | \`docker pull ghcr.io/jockdarock/scribby-backend-agent:${{ github.ref_name }}-${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Deploy" >> $GITHUB_STEP_SUMMARY
          echo "To deploy these images, update your \`docker-compose.yml\` to use the published images:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`yaml" >> $GITHUB_STEP_SUMMARY
          echo "services:" >> $GITHUB_STEP_SUMMARY
          echo "  transcription-api:" >> $GITHUB_STEP_SUMMARY
          echo "    image: ghcr.io/jockdarock/scribby-backend:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "  agent-api:" >> $GITHUB_STEP_SUMMARY
          echo "    image: ghcr.io/jockdarock/scribby-backend-agent:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "  frontend:" >> $GITHUB_STEP_SUMMARY
          echo "    image: ghcr.io/jockdarock/scribby-agent-frontend:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
